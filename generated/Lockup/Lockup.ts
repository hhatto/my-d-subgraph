// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Lockedup extends ethereum.Event {
  get params(): Lockedup__Params {
    return new Lockedup__Params(this);
  }
}

export class Lockedup__Params {
  _event: Lockedup;

  constructor(event: Lockedup) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _property(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Lockup__getStorageLastSameRewardsAmountAndBlockResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Lockup__calculateCumulativeRewardPricesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Lockup extends ethereum.SmartContract {
  static bind(address: Address): Lockup {
    return new Lockup("Lockup", address);
  }

  configAddress(): Address {
    let result = super.call("configAddress", "configAddress():(address)", []);

    return result[0].toAddress();
  }

  try_configAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "configAddress",
      "configAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStorageAddress(): Address {
    let result = super.call(
      "getStorageAddress",
      "getStorageAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getStorageAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getStorageAddress",
      "getStorageAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStorageAllValue(): BigInt {
    let result = super.call(
      "getStorageAllValue",
      "getStorageAllValue():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStorageAllValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageAllValue",
      "getStorageAllValue():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageCumulativeGlobalRewards(): BigInt {
    let result = super.call(
      "getStorageCumulativeGlobalRewards",
      "getStorageCumulativeGlobalRewards():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStorageCumulativeGlobalRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageCumulativeGlobalRewards",
      "getStorageCumulativeGlobalRewards():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageDIP4GenesisBlock(): BigInt {
    let result = super.call(
      "getStorageDIP4GenesisBlock",
      "getStorageDIP4GenesisBlock():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStorageDIP4GenesisBlock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageDIP4GenesisBlock",
      "getStorageDIP4GenesisBlock():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageInterestPrice(_property: Address): BigInt {
    let result = super.call(
      "getStorageInterestPrice",
      "getStorageInterestPrice(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );

    return result[0].toBigInt();
  }

  try_getStorageInterestPrice(_property: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageInterestPrice",
      "getStorageInterestPrice(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageLastCumulativeHoldersRewardAmountPerProperty(
    _property: Address
  ): BigInt {
    let result = super.call(
      "getStorageLastCumulativeHoldersRewardAmountPerProperty",
      "getStorageLastCumulativeHoldersRewardAmountPerProperty(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );

    return result[0].toBigInt();
  }

  try_getStorageLastCumulativeHoldersRewardAmountPerProperty(
    _property: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageLastCumulativeHoldersRewardAmountPerProperty",
      "getStorageLastCumulativeHoldersRewardAmountPerProperty(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageLastCumulativeHoldersRewardPrice(): BigInt {
    let result = super.call(
      "getStorageLastCumulativeHoldersRewardPrice",
      "getStorageLastCumulativeHoldersRewardPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStorageLastCumulativeHoldersRewardPrice(): ethereum.CallResult<
    BigInt
  > {
    let result = super.tryCall(
      "getStorageLastCumulativeHoldersRewardPrice",
      "getStorageLastCumulativeHoldersRewardPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageLastCumulativeHoldersRewardPricePerProperty(
    _property: Address
  ): BigInt {
    let result = super.call(
      "getStorageLastCumulativeHoldersRewardPricePerProperty",
      "getStorageLastCumulativeHoldersRewardPricePerProperty(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );

    return result[0].toBigInt();
  }

  try_getStorageLastCumulativeHoldersRewardPricePerProperty(
    _property: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageLastCumulativeHoldersRewardPricePerProperty",
      "getStorageLastCumulativeHoldersRewardPricePerProperty(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageLastCumulativeInterestPrice(): BigInt {
    let result = super.call(
      "getStorageLastCumulativeInterestPrice",
      "getStorageLastCumulativeInterestPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStorageLastCumulativeInterestPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageLastCumulativeInterestPrice",
      "getStorageLastCumulativeInterestPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageLastInterestPrice(_property: Address, _user: Address): BigInt {
    let result = super.call(
      "getStorageLastInterestPrice",
      "getStorageLastInterestPrice(address,address):(uint256)",
      [ethereum.Value.fromAddress(_property), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getStorageLastInterestPrice(
    _property: Address,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageLastInterestPrice",
      "getStorageLastInterestPrice(address,address):(uint256)",
      [ethereum.Value.fromAddress(_property), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageLastSameRewardsAmountAndBlock(): Lockup__getStorageLastSameRewardsAmountAndBlockResult {
    let result = super.call(
      "getStorageLastSameRewardsAmountAndBlock",
      "getStorageLastSameRewardsAmountAndBlock():(uint256,uint256)",
      []
    );

    return new Lockup__getStorageLastSameRewardsAmountAndBlockResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getStorageLastSameRewardsAmountAndBlock(): ethereum.CallResult<
    Lockup__getStorageLastSameRewardsAmountAndBlockResult
  > {
    let result = super.tryCall(
      "getStorageLastSameRewardsAmountAndBlock",
      "getStorageLastSameRewardsAmountAndBlock():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lockup__getStorageLastSameRewardsAmountAndBlockResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getStorageLastStakedInterestPrice(
    _property: Address,
    _user: Address
  ): BigInt {
    let result = super.call(
      "getStorageLastStakedInterestPrice",
      "getStorageLastStakedInterestPrice(address,address):(uint256)",
      [ethereum.Value.fromAddress(_property), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getStorageLastStakedInterestPrice(
    _property: Address,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageLastStakedInterestPrice",
      "getStorageLastStakedInterestPrice(address,address):(uint256)",
      [ethereum.Value.fromAddress(_property), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageLastStakesChangedCumulativeReward(): BigInt {
    let result = super.call(
      "getStorageLastStakesChangedCumulativeReward",
      "getStorageLastStakesChangedCumulativeReward():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getStorageLastStakesChangedCumulativeReward(): ethereum.CallResult<
    BigInt
  > {
    let result = super.tryCall(
      "getStorageLastStakesChangedCumulativeReward",
      "getStorageLastStakesChangedCumulativeReward():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStoragePendingInterestWithdrawal(
    _property: Address,
    _user: Address
  ): BigInt {
    let result = super.call(
      "getStoragePendingInterestWithdrawal",
      "getStoragePendingInterestWithdrawal(address,address):(uint256)",
      [ethereum.Value.fromAddress(_property), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_getStoragePendingInterestWithdrawal(
    _property: Address,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStoragePendingInterestWithdrawal",
      "getStoragePendingInterestWithdrawal(address,address):(uint256)",
      [ethereum.Value.fromAddress(_property), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStoragePropertyValue(_property: Address): BigInt {
    let result = super.call(
      "getStoragePropertyValue",
      "getStoragePropertyValue(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );

    return result[0].toBigInt();
  }

  try_getStoragePropertyValue(_property: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStoragePropertyValue",
      "getStoragePropertyValue(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStorageValue(_property: Address, _sender: Address): BigInt {
    let result = super.call(
      "getStorageValue",
      "getStorageValue(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_property),
        ethereum.Value.fromAddress(_sender)
      ]
    );

    return result[0].toBigInt();
  }

  try_getStorageValue(
    _property: Address,
    _sender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStorageValue",
      "getStorageValue(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_property),
        ethereum.Value.fromAddress(_sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  calculateCumulativeRewardPrices(): Lockup__calculateCumulativeRewardPricesResult {
    let result = super.call(
      "calculateCumulativeRewardPrices",
      "calculateCumulativeRewardPrices():(uint256,uint256,uint256)",
      []
    );

    return new Lockup__calculateCumulativeRewardPricesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_calculateCumulativeRewardPrices(): ethereum.CallResult<
    Lockup__calculateCumulativeRewardPricesResult
  > {
    let result = super.tryCall(
      "calculateCumulativeRewardPrices",
      "calculateCumulativeRewardPrices():(uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Lockup__calculateCumulativeRewardPricesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  calculateCumulativeHoldersRewardAmount(_property: Address): BigInt {
    let result = super.call(
      "calculateCumulativeHoldersRewardAmount",
      "calculateCumulativeHoldersRewardAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );

    return result[0].toBigInt();
  }

  try_calculateCumulativeHoldersRewardAmount(
    _property: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateCumulativeHoldersRewardAmount",
      "calculateCumulativeHoldersRewardAmount(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateWithdrawableInterestAmount(
    _property: Address,
    _user: Address
  ): BigInt {
    let result = super.call(
      "calculateWithdrawableInterestAmount",
      "calculateWithdrawableInterestAmount(address,address):(uint256)",
      [ethereum.Value.fromAddress(_property), ethereum.Value.fromAddress(_user)]
    );

    return result[0].toBigInt();
  }

  try_calculateWithdrawableInterestAmount(
    _property: Address,
    _user: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateWithdrawableInterestAmount",
      "calculateWithdrawableInterestAmount(address,address):(uint256)",
      [ethereum.Value.fromAddress(_property), ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAllValue(): BigInt {
    let result = super.call("getAllValue", "getAllValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getAllValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getAllValue", "getAllValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getValue(_property: Address, _sender: Address): BigInt {
    let result = super.call("getValue", "getValue(address,address):(uint256)", [
      ethereum.Value.fromAddress(_property),
      ethereum.Value.fromAddress(_sender)
    ]);

    return result[0].toBigInt();
  }

  try_getValue(
    _property: Address,
    _sender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getValue",
      "getValue(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_property),
        ethereum.Value.fromAddress(_sender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPropertyValue(_property: Address): BigInt {
    let result = super.call(
      "getPropertyValue",
      "getPropertyValue(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );

    return result[0].toBigInt();
  }

  try_getPropertyValue(_property: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPropertyValue",
      "getPropertyValue(address):(uint256)",
      [ethereum.Value.fromAddress(_property)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _config(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeOwnerCall extends ethereum.Call {
  get inputs(): ChangeOwnerCall__Inputs {
    return new ChangeOwnerCall__Inputs(this);
  }

  get outputs(): ChangeOwnerCall__Outputs {
    return new ChangeOwnerCall__Outputs(this);
  }
}

export class ChangeOwnerCall__Inputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeOwnerCall__Outputs {
  _call: ChangeOwnerCall;

  constructor(call: ChangeOwnerCall) {
    this._call = call;
  }
}

export class CreateStorageCall extends ethereum.Call {
  get inputs(): CreateStorageCall__Inputs {
    return new CreateStorageCall__Inputs(this);
  }

  get outputs(): CreateStorageCall__Outputs {
    return new CreateStorageCall__Outputs(this);
  }
}

export class CreateStorageCall__Inputs {
  _call: CreateStorageCall;

  constructor(call: CreateStorageCall) {
    this._call = call;
  }
}

export class CreateStorageCall__Outputs {
  _call: CreateStorageCall;

  constructor(call: CreateStorageCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetStorageCall extends ethereum.Call {
  get inputs(): SetStorageCall__Inputs {
    return new SetStorageCall__Inputs(this);
  }

  get outputs(): SetStorageCall__Outputs {
    return new SetStorageCall__Outputs(this);
  }
}

export class SetStorageCall__Inputs {
  _call: SetStorageCall;

  constructor(call: SetStorageCall) {
    this._call = call;
  }

  get _storageAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStorageCall__Outputs {
  _call: SetStorageCall;

  constructor(call: SetStorageCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class LockupCall extends ethereum.Call {
  get inputs(): LockupCall__Inputs {
    return new LockupCall__Inputs(this);
  }

  get outputs(): LockupCall__Outputs {
    return new LockupCall__Outputs(this);
  }
}

export class LockupCall__Inputs {
  _call: LockupCall;

  constructor(call: LockupCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _property(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class LockupCall__Outputs {
  _call: LockupCall;

  constructor(call: LockupCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get _property(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class UpdateCall extends ethereum.Call {
  get inputs(): UpdateCall__Inputs {
    return new UpdateCall__Inputs(this);
  }

  get outputs(): UpdateCall__Outputs {
    return new UpdateCall__Outputs(this);
  }
}

export class UpdateCall__Inputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class UpdateCall__Outputs {
  _call: UpdateCall;

  constructor(call: UpdateCall) {
    this._call = call;
  }
}

export class SetDIP4GenesisBlockCall extends ethereum.Call {
  get inputs(): SetDIP4GenesisBlockCall__Inputs {
    return new SetDIP4GenesisBlockCall__Inputs(this);
  }

  get outputs(): SetDIP4GenesisBlockCall__Outputs {
    return new SetDIP4GenesisBlockCall__Outputs(this);
  }
}

export class SetDIP4GenesisBlockCall__Inputs {
  _call: SetDIP4GenesisBlockCall;

  constructor(call: SetDIP4GenesisBlockCall) {
    this._call = call;
  }

  get _block(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDIP4GenesisBlockCall__Outputs {
  _call: SetDIP4GenesisBlockCall;

  constructor(call: SetDIP4GenesisBlockCall) {
    this._call = call;
  }
}
